{"ast":null,"code":"var _jsxFileName = \"/workspaces/projetoreactjsaluno/src/Componentes/modulo07/FragmentoReact.js\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FragmentoReact = () => {\n  /*Aqui temos um **React Fragment**. \n  Ele é usado para agrupar múltiplos elementos JSX sem adicionar um novo nó ao DOM.\n  ### Por que usar Fragmentos?\n  No React, cada componente deve retornar um único elemento pai. \n  Se você quiser retornar múltiplos elementos, normalmente teria que envolvê-los em uma `<div>`. \n  Porém, isso adiciona uma `<div>` extra ao DOM, o que pode afetar o layout ou a semântica do HTML.\n  ### Como funciona?\n  O fragmento pode ser escrito de duas formas:\n  - `<React.Fragment> ... </React.Fragment>`\n  - `<> ... </>`\n  Aqui usamos a forma curta (`<> ... </>`):\n  Isso permite retornar múltiplos elementos sem criar um novo nó no DOM.\n  ### Pontos de atenção\n  - Fragmentos não aceitam atributos (exceto a versão completa, que aceita `key`).\n  - Útil para listas ou quando não quer alterar a estrutura do DOM.    */\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"01 - FragmentoReac. N\\xE3o lembrei onde usei, por\\xE9m \\xE9 um recurso :)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"02 - FragmentoReact\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_c = FragmentoReact;\nexport default FragmentoReact;\nvar _c;\n$RefreshReg$(_c, \"FragmentoReact\");","map":{"version":3,"names":["FragmentoReact","_jsxDEV","_Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/projetoreactjsaluno/src/Componentes/modulo07/FragmentoReact.js"],"sourcesContent":["const FragmentoReact = () => {\n    /*Aqui temos um **React Fragment**. \nEle é usado para agrupar múltiplos elementos JSX sem adicionar um novo nó ao DOM.\n### Por que usar Fragmentos?\nNo React, cada componente deve retornar um único elemento pai. \nSe você quiser retornar múltiplos elementos, normalmente teria que envolvê-los em uma `<div>`. \nPorém, isso adiciona uma `<div>` extra ao DOM, o que pode afetar o layout ou a semântica do HTML.\n### Como funciona?\nO fragmento pode ser escrito de duas formas:\n- `<React.Fragment> ... </React.Fragment>`\n- `<> ... </>`\nAqui usamos a forma curta (`<> ... </>`):\nIsso permite retornar múltiplos elementos sem criar um novo nó no DOM.\n### Pontos de atenção\n- Fragmentos não aceitam atributos (exceto a versão completa, que aceita `key`).\n- Útil para listas ou quando não quer alterar a estrutura do DOM.    */\n  return (\n    <>\n            <h2>01 - FragmentoReac. Não lembrei onde usei, porém é um recurso :)</h2>\n            <h2>02 - FragmentoReact</h2>\n    </>\n  )\n}\nexport default FragmentoReact"],"mappings":";;AAAA,MAAMA,cAAc,GAAGA,CAAA,KAAM;EACzB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,oBACEC,OAAA,CAAAC,SAAA;IAAAC,QAAA,gBACQF,OAAA;MAAAE,QAAA,EAAI;IAAgE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzEN,OAAA;MAAAE,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA,eAClC,CAAC;AAEP,CAAC;AAAAC,EAAA,GAtBKR,cAAc;AAuBpB,eAAeA,cAAc;AAAA,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}