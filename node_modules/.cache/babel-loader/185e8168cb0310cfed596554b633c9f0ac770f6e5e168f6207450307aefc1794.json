{"ast":null,"code":"var _jsxFileName = \"/workspaces/projetoreactjsaluno/src/Componentes/JogoCacaPalavrasParte03/JogoCacaPalavrasPrincipal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { palavrasLista } from \"./Util/Word\";\nimport { TelaInicialProjeto } from './TelaInicialProjeto';\nimport { TelaJogando } from './TelaJogando';\nimport { TelaFimdeJogo } from './TelaFimdeJogo';\nimport \"./JogoCacaPalavrasPrincipal.css\";\n\n// Etapa 02 - Implementar a lógica do jogo\nimport { useCallback } from 'react';\n\n// Estágios do jogo\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst estagios = [{\n  id: 1,\n  nome: \"Início\"\n},\n// 0\n{\n  id: 2,\n  nome: \"Jogando\"\n},\n// 1\n{\n  id: 3,\n  nome: \"Fimjogo\"\n}]; // 2\n\nconst JogoCacaPalavrasPrincipal = () => {\n  _s();\n  const [estagioJogo, setEstagiodoJogo] = useState(estagios[0].nome); // Posção 0 = Início\n  const [palavrasJogo] = useState(palavrasLista);\n  const [obterCategoriaDoJogo, setObterCategoriaDoJogo] = useState(\"\");\n  const [letrasDoJogo, setLetrasDoJogo] = useState([]);\n\n  // Variáveis que vão alterar durante o jogo\n  // vão transitar com a TelaJogando.js\n  const [letrasAdivinhadasVetor, setLetrasAdivinhadasVetor] = useState([]);\n  const [letrasErradasVetor, setLetrasErradasVetor] = useState([]);\n  const [tentativas, setTentativas] = useState(3);\n  const [pontuacao, setPontuacao] = useState(10);\n\n  //console.log(\"Palavras do Jogo: \",palavrasJogo)\n\n  // Etapa 02 - Função para carregar a palavra e categoria\n  /*\n  Ótima pergunta! A finalidade do useCallback neste ponto é memorizar (ou \"cachear\") a função funcaoCarregarPalavraeCategoria para que ela só seja recriada quando a dependência palavrasJogo mudar.\n  Por que usar useCallback aqui?\n  Evita recriação desnecessária: Sem useCallback, toda vez que o componente renderiza, a função seria criada novamente. Com useCallback, ela só é recriada se palavrasJogo mudar.\n  Performance: Isso pode ser útil se você passar essa função para componentes filhos que dependem de referência estável (por exemplo, em otimizações com React.memo).\n  Consistência: Garante que a função mantém a mesma referência entre renders, a menos que as dependências mudem.\n  Exemplo simplificado\n  Só será recriada se dependencia mudar.\n  No seu código\n  No seu caso, como palavrasJogo é inicializado uma vez e nunca muda, o uso de useCallback não traz muito benefício prático. Mas, se no futuro palavrasJogo pudesse mudar, useCallback garantiria que a função fosse atualizada corretamente.\n  Resumo:\n  useCallback serve para evitar que a função seja recriada em toda renderização, melhorando performance e estabilidade de referência, especialmente ao passar funções para componentes filhos.\n  */\n  const funcaoCarregarPalavraeCategoria = useCallback(() => {\n    const listaCategorias = Object.keys(palavrasJogo);\n    // Para arredondar para baixo -> Math.floor\n    const categoria = listaCategorias[Math.floor(Math.random() * Object.keys(listaCategorias).length)];\n    const palavraLocal = palavrasJogo[categoria][Math.floor(Math.random() * palavrasJogo[categoria].length)];\n    // return usando {} - retorna um objeto, \n    // return usando [] retornaria um array.\n    return {\n      categoria,\n      palavraLocal\n    };\n  }, [palavrasJogo]); // Função acionada sempre que o valor desa variável alterar/mudar\n\n  const funcaoIniciarJogo = () => {\n    console.log(\"Iniciar Jogo\");\n    console.log(\"Iniciar Jogo\");\n    console.log(\"Iniciar Jogo\");\n    // etapa 02 - Carregar palavra e categoria\n    // obter palavra e categoria. Devem ter o mesmo nome utilizado no return.\n    // Aqui as variáveis são locais. Precisamos passar para a s variáveis \n    // de estado para que possam ser utilizadas na TelaJogando.js\n    // A variável palavraLocal será dividida em letras e armazenada na variável de estado letrasDoJogo\n    // A variável categoria será armazenada na variável de estado obterCategoriaDoJogo\n    const {\n      categoria,\n      palavraLocal\n    } = funcaoCarregarPalavraeCategoria();\n    console.log(`Variaveis Locaisl: Categoria: ${categoria} Palavra: ${palavraLocal}`);\n\n    // Etapa 03 - Caminho para termos os quadrados na tela\n    // Colocar a categoria na variável de estado\n    setObterCategoriaDoJogo(categoria);\n    // Colocar as letras da palavra na variável de estado\n    setLetrasDoJogo(palavraLocal.split(\"\")); // Dividir a palavra em letras\n    console.log(`obterCategoriaDoJogo: ${obterCategoriaDoJogo} letrasDoJogo: ${letrasDoJogo}`);\n\n    // Mudar o estágio do jogo para Jogando\n    setEstagiodoJogo(estagios[1].nome);\n  };\n  const processarLetraJogoFunc = () => {\n    setEstagiodoJogo(estagios[2].nome);\n  };\n  const funcaoVoltarInicioJogo = () => {\n    setEstagiodoJogo(estagios[0].nome);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"jogo-caca-palavras-container\",\n    children: [estagioJogo === \"Início\" && /*#__PURE__*/_jsxDEV(TelaInicialProjeto, {\n      iniciarJogo: funcaoIniciarJogo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 38\n    }, this), estagioJogo === \"Jogando\" && /*#__PURE__*/_jsxDEV(TelaJogando, {\n      processarLetraJogo: processarLetraJogoFunc,\n      pontuacao: pontuacao,\n      obterCategoriaDoJogo: obterCategoriaDoJogo,\n      tentativas: tentativas,\n      letrasAdivinhadasVetor: letrasAdivinhadasVetor,\n      letrasDoJogo: letrasDoJogo,\n      letrasErradasVetor: letrasErradasVetor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 39\n    }, this), estagioJogo === \"Fimjogo\" && /*#__PURE__*/_jsxDEV(TelaFimdeJogo, {\n      voltarInicio: funcaoVoltarInicioJogo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 39\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(JogoCacaPalavrasPrincipal, \"ATD83E9KLNN2ZaDxLjFdnbIJqUU=\");\n_c = JogoCacaPalavrasPrincipal;\nexport default JogoCacaPalavrasPrincipal;\nvar _c;\n$RefreshReg$(_c, \"JogoCacaPalavrasPrincipal\");","map":{"version":3,"names":["React","useState","palavrasLista","TelaInicialProjeto","TelaJogando","TelaFimdeJogo","useCallback","jsxDEV","_jsxDEV","estagios","id","nome","JogoCacaPalavrasPrincipal","_s","estagioJogo","setEstagiodoJogo","palavrasJogo","obterCategoriaDoJogo","setObterCategoriaDoJogo","letrasDoJogo","setLetrasDoJogo","letrasAdivinhadasVetor","setLetrasAdivinhadasVetor","letrasErradasVetor","setLetrasErradasVetor","tentativas","setTentativas","pontuacao","setPontuacao","funcaoCarregarPalavraeCategoria","listaCategorias","Object","keys","categoria","Math","floor","random","length","palavraLocal","funcaoIniciarJogo","console","log","split","processarLetraJogoFunc","funcaoVoltarInicioJogo","className","children","iniciarJogo","fileName","_jsxFileName","lineNumber","columnNumber","processarLetraJogo","voltarInicio","_c","$RefreshReg$"],"sources":["/workspaces/projetoreactjsaluno/src/Componentes/JogoCacaPalavrasParte03/JogoCacaPalavrasPrincipal.js"],"sourcesContent":["import React, { useState } from 'react'\nimport {palavrasLista} from \"./Util/Word\"\nimport { TelaInicialProjeto } from './TelaInicialProjeto'\nimport { TelaJogando } from './TelaJogando'\nimport { TelaFimdeJogo } from './TelaFimdeJogo'\nimport \"./JogoCacaPalavrasPrincipal.css\"\n\n// Etapa 02 - Implementar a lógica do jogo\nimport { useCallback } from 'react'\n\n  // Estágios do jogo\n  const estagios = [\n  {id:1,nome: \"Início\"}, // 0\n  {id:2,nome: \"Jogando\"}, // 1\n  {id:3,nome: \"Fimjogo\"} ] // 2\n\nconst JogoCacaPalavrasPrincipal = () => {\n\n  const [estagioJogo,setEstagiodoJogo] = useState (estagios[0].nome) // Posção 0 = Início\n  const [palavrasJogo] = useState (palavrasLista)\n  \n  const [obterCategoriaDoJogo,setObterCategoriaDoJogo] = useState(\"\");\n  const [letrasDoJogo,setLetrasDoJogo] = useState([]);\n\n  // Variáveis que vão alterar durante o jogo\n  // vão transitar com a TelaJogando.js\n  const [letrasAdivinhadasVetor,setLetrasAdivinhadasVetor] = useState([])\n  const [letrasErradasVetor,setLetrasErradasVetor] = useState([])\n  const [tentativas,setTentativas] = useState(3)\n  const [pontuacao,setPontuacao] = useState(10)\n\n  //console.log(\"Palavras do Jogo: \",palavrasJogo)\n\n// Etapa 02 - Função para carregar a palavra e categoria\n  /*\nÓtima pergunta! A finalidade do useCallback neste ponto é memorizar (ou \"cachear\") a função funcaoCarregarPalavraeCategoria para que ela só seja recriada quando a dependência palavrasJogo mudar.\n\nPor que usar useCallback aqui?\nEvita recriação desnecessária: Sem useCallback, toda vez que o componente renderiza, a função seria criada novamente. Com useCallback, ela só é recriada se palavrasJogo mudar.\nPerformance: Isso pode ser útil se você passar essa função para componentes filhos que dependem de referência estável (por exemplo, em otimizações com React.memo).\nConsistência: Garante que a função mantém a mesma referência entre renders, a menos que as dependências mudem.\nExemplo simplificado\nSó será recriada se dependencia mudar.\nNo seu código\nNo seu caso, como palavrasJogo é inicializado uma vez e nunca muda, o uso de useCallback não traz muito benefício prático. Mas, se no futuro palavrasJogo pudesse mudar, useCallback garantiria que a função fosse atualizada corretamente.\n\nResumo:\nuseCallback serve para evitar que a função seja recriada em toda renderização, melhorando performance e estabilidade de referência, especialmente ao passar funções para componentes filhos.\n  */\n const funcaoCarregarPalavraeCategoria = useCallback ( () => {\n    const listaCategorias = Object.keys(palavrasJogo)\n    // Para arredondar para baixo -> Math.floor\n    const categoria = listaCategorias[Math.floor(Math.random() * Object.keys(listaCategorias).length)]\n    const palavraLocal = palavrasJogo[categoria][Math.floor(Math.random() * palavrasJogo[categoria].length)]\n    // return usando {} - retorna um objeto, \n    // return usando [] retornaria um array.\n    return {categoria,palavraLocal};\n  }, [palavrasJogo] ); // Função acionada sempre que o valor desa variável alterar/mudar\n\n  const funcaoIniciarJogo = () => {\n    console.log(\"Iniciar Jogo\");\n    console.log(\"Iniciar Jogo\");\n    console.log(\"Iniciar Jogo\");\n    // etapa 02 - Carregar palavra e categoria\n    // obter palavra e categoria. Devem ter o mesmo nome utilizado no return.\n    // Aqui as variáveis são locais. Precisamos passar para a s variáveis \n    // de estado para que possam ser utilizadas na TelaJogando.js\n    // A variável palavraLocal será dividida em letras e armazenada na variável de estado letrasDoJogo\n    // A variável categoria será armazenada na variável de estado obterCategoriaDoJogo\n    const {categoria,palavraLocal} = funcaoCarregarPalavraeCategoria()\n    console.log(`Variaveis Locaisl: Categoria: ${categoria} Palavra: ${palavraLocal}`)\n\n    // Etapa 03 - Caminho para termos os quadrados na tela\n    // Colocar a categoria na variável de estado\n    setObterCategoriaDoJogo(categoria)\n    // Colocar as letras da palavra na variável de estado\n    setLetrasDoJogo(palavraLocal.split(\"\")) // Dividir a palavra em letras\n    console.log(`obterCategoriaDoJogo: ${obterCategoriaDoJogo} letrasDoJogo: ${letrasDoJogo}`)\n\n    // Mudar o estágio do jogo para Jogando\n    setEstagiodoJogo (estagios[1].nome)\n  }\n  const processarLetraJogoFunc = () => {\n    setEstagiodoJogo (estagios[2].nome)\n  } \n  const funcaoVoltarInicioJogo = () => {\n    setEstagiodoJogo (estagios[0].nome)\n  }\n  \n  \n  \n\n  return (\n    <div className=\"jogo-caca-palavras-container\">\n        {/* <TelaInicialProjeto /> */}\n        {/* Mostrar o estágio do jogo \n        {console.log(\"Dica estagioJogo: \",estagioJogo)} */}\n        {/* Como a posição 0 contem Inicio será apresentado o conteúdo do componente TelaInicial na tela. */}\n        {estagioJogo === \"Início\" && <TelaInicialProjeto iniciarJogo={funcaoIniciarJogo}/>}\n        {/* Antes estava assim:  \n        {estagioJogo === \"Jogando\" && <TelaJogando processarLetraJogo={processarLetraJogoFunc} />} */}\n        {/* Agora está assim:  */}\n        {estagioJogo === \"Jogando\" && <TelaJogando \n          processarLetraJogo={processarLetraJogoFunc}\n          pontuacao = {pontuacao} \n          obterCategoriaDoJogo = {obterCategoriaDoJogo}\n          tentativas = {tentativas}\n          letrasAdivinhadasVetor = {letrasAdivinhadasVetor}\n          letrasDoJogo = {letrasDoJogo}\n          letrasErradasVetor = {letrasErradasVetor}\n      />}\n\n \n\n\n        {estagioJogo === \"Fimjogo\" && <TelaFimdeJogo voltarInicio={funcaoVoltarInicioJogo} />}\n    </div>\n  )\n}\n\nexport default JogoCacaPalavrasPrincipal"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}