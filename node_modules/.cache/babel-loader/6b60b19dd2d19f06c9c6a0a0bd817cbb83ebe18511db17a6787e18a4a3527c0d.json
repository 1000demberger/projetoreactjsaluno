{"ast":null,"code":"var _jsxFileName = \"/workspaces/projetoreactjsaluno/src/Componentes/modulo07/FragmentoReact.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FragmentoReact = () => {\n  /*\n  douglasrm87: poderia explicar o fragmetno reactJS\n  GitHub Copilot: Claro! O fragmento que você selecionou é um **React Fragment**. Ele é usado para agrupar múltiplos elementos JSX sem adicionar um novo nó ao DOM.\n  ### Por que usar Fragmentos?\n  No React, cada componente deve retornar um único elemento pai. Se você quiser retornar múltiplos elementos, normalmente teria que envolvê-los em uma `<div>`. Porém, isso adiciona uma `<div>` extra ao DOM, o que pode afetar o layout ou a semântica do HTML.\n  ### Como funciona?\n  O fragmento pode ser escrito de duas formas:\n  - `<React.Fragment> ... </React.Fragment>`\n  - `<> ... </>`\n  No seu exemplo, você usou a forma curta (`<> ... </>`):\n  ```javascript\n  <>\n  <h2>01 - FragmentoReact</h2>\n  <h2>02 - FragmentoReact</h2>\n  </>\n  ```\n  Isso permite retornar múltiplos elementos sem criar um novo nó no DOM.\n  ### Pontos de atenção\n  - Fragmentos não aceitam atributos (exceto a versão completa, que aceita `key`).\n  - Útil para listas ou quando não quer alterar a estrutura do DOM.\n  ### Exemplo visual\n  Sem fragmento:\n  ```html\n  <div>\n  <h2>01</h2>\n  <h2>02</h2>\n  </div>\n  ```\n  Com fragmento:\n  ```html\n  <h2>01</h2>\n  <h2>02</h2>\n  ```\n  Ou seja, não há `<div>` extra.\n  Se precisar de mais exemplos ou quiser saber sobre fragmentos com `key`, só pedir!\n  */\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"01 - FragmentoReact\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"02 - FragmentoReact\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_c = FragmentoReact;\nexport default FragmentoReact;\nvar _c;\n$RefreshReg$(_c, \"FragmentoReact\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","FragmentoReact","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/projetoreactjsaluno/src/Componentes/modulo07/FragmentoReact.js"],"sourcesContent":["import React from 'react'\n\nconst FragmentoReact = () => {\n    /*\ndouglasrm87: poderia explicar o fragmetno reactJS\n\nGitHub Copilot: Claro! O fragmento que você selecionou é um **React Fragment**. Ele é usado para agrupar múltiplos elementos JSX sem adicionar um novo nó ao DOM.\n\n### Por que usar Fragmentos?\nNo React, cada componente deve retornar um único elemento pai. Se você quiser retornar múltiplos elementos, normalmente teria que envolvê-los em uma `<div>`. Porém, isso adiciona uma `<div>` extra ao DOM, o que pode afetar o layout ou a semântica do HTML.\n\n### Como funciona?\nO fragmento pode ser escrito de duas formas:\n- `<React.Fragment> ... </React.Fragment>`\n- `<> ... </>`\n\nNo seu exemplo, você usou a forma curta (`<> ... </>`):\n\n```javascript\n<>\n    <h2>01 - FragmentoReact</h2>\n    <h2>02 - FragmentoReact</h2>\n</>\n```\n\nIsso permite retornar múltiplos elementos sem criar um novo nó no DOM.\n\n### Pontos de atenção\n- Fragmentos não aceitam atributos (exceto a versão completa, que aceita `key`).\n- Útil para listas ou quando não quer alterar a estrutura do DOM.\n\n### Exemplo visual\nSem fragmento:\n```html\n<div>\n  <h2>01</h2>\n  <h2>02</h2>\n</div>\n```\nCom fragmento:\n```html\n<h2>01</h2>\n<h2>02</h2>\n```\nOu seja, não há `<div>` extra.\n\nSe precisar de mais exemplos ou quiser saber sobre fragmentos com `key`, só pedir!\n    */\n  return (\n    \n    <>\n            <h2>01 - FragmentoReact</h2>\n            <h2>02 - FragmentoReact</h2>\n    </>\n  )\n}\n\nexport default FragmentoReact"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEzB,MAAMC,cAAc,GAAGA,CAAA,KAAM;EACzB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAUE,oBAEEH,OAAA,CAAAE,SAAA;IAAAE,QAAA,gBACQJ,OAAA;MAAAI,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5BR,OAAA;MAAAI,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA,eAClC,CAAC;AAEP,CAAC;AAAAC,EAAA,GArDKN,cAAc;AAuDpB,eAAeA,cAAc;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}