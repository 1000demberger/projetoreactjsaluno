{"ast":null,"code":"var _jsxFileName = \"/workspaces/projetoreactjsaluno/src/Componentes/JogoCacaPalavrasParte03/TelaJogando.js\",\n  _s = $RefreshSig$();\n// Relacionados ao formulário. \nimport React, { useRef, useState } from 'react';\nimport \"./TelaJogando.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TelaJogando = ({\n  processarLetraJogoFunc,\n  pontuacao,\n  obterCategoriaDoJogo,\n  tentativas,\n  letrasAdivinhadasVetor,\n  letrasDoJogo,\n  letrasErradasVetor\n}) => {\n  _s();\n  {/* Relacionados ao formulário. */}\n  const [letraDigitada, setLetraDigitada] = useState(\"\");\n  const letraDigitadaRef = useRef(null);\n  // Teste etapa 03\n  console.log(`Variaveis Globais TelaJogando.js: \n         CategoriaDoJogo: ${obterCategoriaDoJogo} \n         VetorletrasDoJogo: ${letrasDoJogo}`);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"css_telajogando\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tela Jogando 03\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"css_pontuacao\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" Pontua\\xE7\\xE3o: \", pontuacao, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Advinhe a palavra \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"css_dica\",\n      children: [\" Dica sobre a palavra.\", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" \", obterCategoriaDoJogo, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Voc\\xEA ainda tem \", tentativas, \" tentativas\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"css_container_palavra\",\n      children: letrasDoJogo && letrasDoJogo.map((letra, indice) => letrasAdivinhadasVetor.includes(letra) ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"css_letras\",\n        children: [\"        \", letra, \" \"]\n      }, indice, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"css_quadrado_branco\",\n        children: \"   \"\n      }, indice, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 23\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Tente Advinhar uma letra da palavra \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"Letra\",\n        maxLength: \"1\",\n        required: true,\n        onChange: e => setLetraDigitada(e.target.value),\n        value: letraDigitada,\n        ref: letraDigitadaRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Jogar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 27\n      }, this), console.log(\"Dica letraDigitada\", letraDigitada), console.log(\"Dica letraDigitadaRef\", letraDigitadaRef)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"css_letras_erradas\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Letras j\\xE1 utilizadas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), letrasErradasVetor && letrasErradasVetor.map((letra, indice) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" \", letra, \", \"]\n      }, indice, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 26\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: processarLetraJogoFunc,\n      children: \"Finalizar Jogo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(TelaJogando, \"k0FdGBmB1zUw2llFqKtvh1pHX/I=\");\n_c = TelaJogando;\nvar _c;\n$RefreshReg$(_c, \"TelaJogando\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","TelaJogando","processarLetraJogoFunc","pontuacao","obterCategoriaDoJogo","tentativas","letrasAdivinhadasVetor","letrasDoJogo","letrasErradasVetor","_s","letraDigitada","setLetraDigitada","letraDigitadaRef","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","letra","indice","includes","type","name","maxLength","required","onChange","e","target","value","ref","onClick","_c","$RefreshReg$"],"sources":["/workspaces/projetoreactjsaluno/src/Componentes/JogoCacaPalavrasParte03/TelaJogando.js"],"sourcesContent":["// Relacionados ao formulário. \nimport React, { useRef, useState } from 'react'\nimport \"./TelaJogando.css\"\nexport const TelaJogando = ({processarLetraJogoFunc,\n          pontuacao,\n          obterCategoriaDoJogo,\n          tentativas,\n                  letrasAdivinhadasVetor,\n                  letrasDoJogo ,\n                         letrasErradasVetor\n\n}) => {\n  {/* Relacionados ao formulário. */}\n  const [letraDigitada,setLetraDigitada] = useState (\"\");\n  const letraDigitadaRef = useRef (null)\n  // Teste etapa 03\n  console.log(`Variaveis Globais TelaJogando.js: \n         CategoriaDoJogo: ${obterCategoriaDoJogo} \n         VetorletrasDoJogo: ${letrasDoJogo}`)\n  return (\n    <div className='css_telajogando'>\n       <h1>Tela Jogando 03</h1>\n        <p className=\"css_pontuacao\">\n                <span> Pontuação: {pontuacao} </span>\n                </p>\n                <h1> Advinhe a palavra </h1>\n                <h3 className=\"css_dica\"> Dica sobre a palavra. \n                    <span> {obterCategoriaDoJogo} </span>\n                </h3>\n                <p>Você ainda tem {tentativas} tentativas</p>\n\n                {/* Quadrado Amarelo. \n                Mostrar a palavra com as letras adivinhadas */}\n                {/*o método map vai gerar um loop e mostrar múltiplos quadrados brancos.*/}\n                {/* Se a letra tiver sido advinhinhada vou mostrar ela.*/}\n                 <div className=\"css_container_palavra\"> \n                { letrasDoJogo && letrasDoJogo.map ((letra,indice) => (\n                    letrasAdivinhadasVetor.includes(letra) ? \n                    ((<span key={indice} className=\"css_letras\">        {letra} </span> )) : \n                    ((<span key={indice} className=\"css_quadrado_branco\">   </span> )) \n                ))} \n            </div>\n                {/* Criar o formulário */}\n                 <p> Tente Advinhar uma letra da palavra </p>\n                    {/* onSubmit={handleFuncaoSubmeter} */}\n                    <form >\n                        <input type=\"text\" name=\"Letra\" maxLength=\"1\" required \n                          onChange={(e) => setLetraDigitada (e.target.value)}\n                          value={letraDigitada}\n                          ref = {letraDigitadaRef}/>\n                          <button>\n                            Jogar\n                          </button>\n                          {console.log (\"Dica letraDigitada\",letraDigitada)}\n                          {console.log (\"Dica letraDigitadaRef\", letraDigitadaRef)}\n                    </form>\n                <div className=\"css_letras_erradas\">\n                {/* Espaço para as letras incorretas */}\n                <p> Letras já utilizadas</p>\n                {/* Se a letra tiver sido advinhinhada vou mostrar ela.*/}\n                { letrasErradasVetor && letrasErradasVetor.map ((letra,indice) => (\n                        (<span key={indice}> {letra}, </span> )  ))}\n                </div>\n            <button onClick={processarLetraJogoFunc}>Finalizar Jogo</button>\n    </div>\n  )\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}