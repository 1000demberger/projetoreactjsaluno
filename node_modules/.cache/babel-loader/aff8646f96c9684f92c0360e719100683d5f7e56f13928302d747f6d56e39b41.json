{"ast":null,"code":"import React,{useState}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CalculadoraIP=()=>{const[ip,setIp]=useState('');const[mask,setMask]=useState('');const[result,setResult]=useState(null);const calculateNetworkInfo=()=>{const ipParts=ip.split('.').map(Number);const maskParts=mask.split('.').map(Number);if(ipParts.length!==4||maskParts.length!==4){alert('Por favor, insira um endereço IPv4 e máscara válidos.');return;}const networkAddress=ipParts.map((part,i)=>part&maskParts[i]);const broadcastAddress=ipParts.map((part,i)=>part|~maskParts[i]&255);const possibleIPs=[];for(let i=1;i<(1<<32-maskParts.reduce((acc,part)=>acc+part.toString(2).replace(/0/g,'').length,0))-1;i++){const possibleIP=[...networkAddress];let carry=i;for(let j=3;j>=0;j--){possibleIP[j]+=carry;carry=Math.floor(possibleIP[j]/256);possibleIP[j]%=256;}possibleIPs.push(possibleIP.join('.'));}setResult({networkAddress:networkAddress.join('.'),broadcastAddress:broadcastAddress.join('.'),possibleIPs});};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Calculadora de IP\"}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"label\",{children:[\"Endere\\xE7o IPv4:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:ip,onChange:e=>setIp(e.target.value),placeholder:\"Ex: 192.168.1.1\"})]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"label\",{children:[\"M\\xE1scara de Rede:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:mask,onChange:e=>setMask(e.target.value),placeholder:\"Ex: 255.255.255.0\"})]})}),/*#__PURE__*/_jsx(\"button\",{onClick:calculateNetworkInfo,children:\"Calcular\"}),result&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Resultados:\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Endere\\xE7o de Rede:\"}),\" \",result.networkAddress]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Endere\\xE7o de Broadcast:\"}),\" \",result.broadcastAddress]}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsx(\"tr\",{children:Array.from({length:10}).map((_,colIndex)=>/*#__PURE__*/_jsxs(\"th\",{children:[\"Coluna \",colIndex+1]},colIndex))})}),/*#__PURE__*/_jsx(\"tbody\",{children:Array.from({length:Math.ceil(result.possibleIPs.length/10)}).map((_,rowIndex)=>/*#__PURE__*/_jsx(\"tr\",{children:Array.from({length:10}).map((_,colIndex)=>{const ipIndex=rowIndex*10+colIndex;return/*#__PURE__*/_jsx(\"td\",{children:result.possibleIPs[ipIndex]||''},colIndex);})},rowIndex))})]}),/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsx(\"strong\",{children:\"Endere\\xE7os IPs Poss\\xEDveis:\"})}),/*#__PURE__*/_jsx(\"ul\",{children:result.possibleIPs.map((ip,index)=>/*#__PURE__*/_jsx(\"li\",{children:ip},index))})]})]});};export default CalculadoraIP;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","CalculadoraIP","ip","setIp","mask","setMask","result","setResult","calculateNetworkInfo","ipParts","split","map","Number","maskParts","length","alert","networkAddress","part","i","broadcastAddress","possibleIPs","reduce","acc","toString","replace","possibleIP","carry","j","Math","floor","push","join","children","type","value","onChange","e","target","placeholder","onClick","Array","from","_","colIndex","ceil","rowIndex","ipIndex","index"],"sources":["/workspaces/projetoreactjsaluno/src/Componentes/CalculadoraIP.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst CalculadoraIP = () => {\n    const [ip, setIp] = useState('');\n    const [mask, setMask] = useState('');\n    const [result, setResult] = useState(null);\n\n    const calculateNetworkInfo = () => {\n        const ipParts = ip.split('.').map(Number);\n        const maskParts = mask.split('.').map(Number);\n\n        if (ipParts.length !== 4 || maskParts.length !== 4) {\n            alert('Por favor, insira um endereço IPv4 e máscara válidos.');\n            return;\n        }\n\n        const networkAddress = ipParts.map((part, i) => part & maskParts[i]);\n        const broadcastAddress = ipParts.map((part, i) => part | ~maskParts[i] & 255);\n\n        const possibleIPs = [];\n        for (let i = 1; i < (1 << (32 - maskParts.reduce((acc, part) => acc + part.toString(2).replace(/0/g, '').length, 0))) - 1; i++) {\n            const possibleIP = [...networkAddress];\n            let carry = i;\n            for (let j = 3; j >= 0; j--) {\n                possibleIP[j] += carry;\n                carry = Math.floor(possibleIP[j] / 256);\n                possibleIP[j] %= 256;\n            }\n            possibleIPs.push(possibleIP.join('.'));\n        }\n\n        setResult({\n            networkAddress: networkAddress.join('.'),\n            broadcastAddress: broadcastAddress.join('.'),\n            possibleIPs,\n        });\n    };\n\n    return (\n        <div>\n            <h1>Calculadora de IP</h1>\n            <div>\n                <label>\n                    Endereço IPv4:\n                    <input\n                        type=\"text\"\n                        value={ip}\n                        onChange={(e) => setIp(e.target.value)}\n                        placeholder=\"Ex: 192.168.1.1\"\n                    />\n                </label>\n            </div>\n            <div>\n                <label>\n                    Máscara de Rede:\n                    <input\n                        type=\"text\"\n                        value={mask}\n                        onChange={(e) => setMask(e.target.value)}\n                        placeholder=\"Ex: 255.255.255.0\"\n                    />\n                </label>\n            </div>\n            <button onClick={calculateNetworkInfo}>Calcular</button>\n            {result && (\n                <div>\n                    <h2>Resultados:</h2>\n                    <p><strong>Endereço de Rede:</strong> {result.networkAddress}</p>\n                    <p><strong>Endereço de Broadcast:</strong> {result.broadcastAddress}</p>\n                    <table>\n                        <thead>\n                            <tr>\n                                {Array.from({ length: 10 }).map((_, colIndex) => (\n                                    <th key={colIndex}>Coluna {colIndex + 1}</th>\n                                ))}\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {Array.from({ length: Math.ceil(result.possibleIPs.length / 10) }).map((_, rowIndex) => (\n                                <tr key={rowIndex}>\n                                    {Array.from({ length: 10 }).map((_, colIndex) => {\n                                        const ipIndex = rowIndex * 10 + colIndex;\n                                        return (\n                                            <td key={colIndex}>\n                                                {result.possibleIPs[ipIndex] || ''}\n                                            </td>\n                                        );\n                                    })}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                    <p><strong>Endereços IPs Possíveis:</strong></p>\n                    <ul>\n                        {result.possibleIPs.map((ip, index) => (\n                            <li key={index}>{ip}</li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default CalculadoraIP;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}