{"ast":null,"code":"var _jsxFileName = \"/workspaces/projetoreactjsaluno/src/Componentes/JogoCacaPalavrasParte02/JogoCacaPalavrasPrincipal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { palavrasLista } from \"./Util/Word\";\nimport { TelaInicialProjeto } from './TelaInicialProjeto';\nimport { TelaJogando } from './TelaJogando';\nimport { TelaFimdeJogo } from './TelaFimdeJogo';\nimport \"./JogoCacaPalavrasPrincipal.css\";\n\n// Etapa 02 - Implementar a lógica do jogo\nimport { useCallback } from 'react';\n\n// Estágios do jogo\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst estagios = [{\n  id: 1,\n  nome: \"Início\"\n},\n// 0\n{\n  id: 2,\n  nome: \"Jogando\"\n},\n// 1\n{\n  id: 3,\n  nome: \"Fimjogo\"\n}]; // 2\n\nconst JogoCacaPalavrasPrincipal = () => {\n  _s();\n  const [estagioJogo, setEstagiodoJogo] = useState(estagios[0].nome); // Posção 0 = Início\n  const [palavrasJogo] = useState(palavrasLista);\n  //console.log(\"Palavras do Jogo: \",palavrasJogo)\n\n  const funcaoIniciarJogo = () => {\n    console.log(\"Iniciar Jogo\");\n    console.log(\"Iniciar Jogo\");\n    console.log(\"Iniciar Jogo\");\n    // etapa 02 - Carregar palavra e categoria\n    // obter palavra e categoria. Devem ter o mesmo nome utilizado no return.\n    // const {categoria,palavraLocal} = funcaoCarregarPalavraeCategoria()\n    console.log(`Categoria: ${categoria} Palavra: ${palavraLocal}`);\n    // Mudar o estágio do jogo para Jogando\n    setEstagiodoJogo(estagios[1].nome);\n  };\n  const processarLetraJogoFunc = () => {\n    setEstagiodoJogo(estagios[2].nome);\n  };\n  const funcaoVoltarInicioJogo = () => {\n    setEstagiodoJogo(estagios[0].nome);\n  };\n\n  // Etapa 02 - Função para carregar a palavra e categoria\n  /*\n  Ótima pergunta! A finalidade do useCallback neste ponto é memorizar (ou \"cachear\") a função funcaoCarregarPalavraeCategoria para que ela só seja recriada quando a dependência palavrasJogo mudar.\n  Por que usar useCallback aqui?\n  Evita recriação desnecessária: Sem useCallback, toda vez que o componente renderiza, a função seria criada novamente. Com useCallback, ela só é recriada se palavrasJogo mudar.\n  Performance: Isso pode ser útil se você passar essa função para componentes filhos que dependem de referência estável (por exemplo, em otimizações com React.memo).\n  Consistência: Garante que a função mantém a mesma referência entre renders, a menos que as dependências mudem.\n  Exemplo simplificado\n  Só será recriada se dependencia mudar.\n  No seu código\n  No seu caso, como palavrasJogo é inicializado uma vez e nunca muda, o uso de useCallback não traz muito benefício prático. Mas, se no futuro palavrasJogo pudesse mudar, useCallback garantiria que a função fosse atualizada corretamente.\n  Resumo:\n  useCallback serve para evitar que a função seja recriada em toda renderização, melhorando performance e estabilidade de referência, especialmente ao passar funções para componentes filhos.\n  */\n  const funcaoCarregarPalavraeCategoria = useCallback(() => {\n    // Escolher uma palavra aleatória\n    const palavraAleatoria = palavrasJogo[Math.floor(Math.random() * palavrasJogo.length)];\n    console.log(\"Palavra Aleatória: \", palavraAleatoria);\n    // Escolher a categoria da palavra\n    const categoriaPalavra = Object.keys(palavraAleatoria)[0];\n    console.log(\"Categoria da Palavra: \", categoriaPalavra);\n    // Escolher a palavra\n    const palavra = palavraAleatoria[categoriaPalavra][Math.floor(Math.random() * palavraAleatoria[categoriaPalavra].length)];\n    console.log(\"Palavra: \", palavra);\n    return {\n      categoria,\n      palavraLocal\n    };\n  }, [palavrasJogo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"jogo-caca-palavras-container\",\n    children: [estagioJogo === \"Início\" && /*#__PURE__*/_jsxDEV(TelaInicialProjeto, {\n      iniciarJogo: funcaoIniciarJogo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 38\n    }, this), estagioJogo === \"Jogando\" && /*#__PURE__*/_jsxDEV(TelaJogando, {\n      processarLetraJogo: processarLetraJogoFunc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 39\n    }, this), estagioJogo === \"Fimjogo\" && /*#__PURE__*/_jsxDEV(TelaFimdeJogo, {\n      voltarInicio: funcaoVoltarInicioJogo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 39\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(JogoCacaPalavrasPrincipal, \"wMQIU7+aEMrIZQH46NeFno6LI3A=\");\n_c = JogoCacaPalavrasPrincipal;\nexport default JogoCacaPalavrasPrincipal;\nvar _c;\n$RefreshReg$(_c, \"JogoCacaPalavrasPrincipal\");","map":{"version":3,"names":["React","useState","palavrasLista","TelaInicialProjeto","TelaJogando","TelaFimdeJogo","useCallback","jsxDEV","_jsxDEV","estagios","id","nome","JogoCacaPalavrasPrincipal","_s","estagioJogo","setEstagiodoJogo","palavrasJogo","funcaoIniciarJogo","console","log","categoria","palavraLocal","processarLetraJogoFunc","funcaoVoltarInicioJogo","funcaoCarregarPalavraeCategoria","palavraAleatoria","Math","floor","random","length","categoriaPalavra","Object","keys","palavra","className","children","iniciarJogo","fileName","_jsxFileName","lineNumber","columnNumber","processarLetraJogo","voltarInicio","_c","$RefreshReg$"],"sources":["/workspaces/projetoreactjsaluno/src/Componentes/JogoCacaPalavrasParte02/JogoCacaPalavrasPrincipal.js"],"sourcesContent":["import React, { useState } from 'react'\nimport {palavrasLista} from \"./Util/Word\"\nimport { TelaInicialProjeto } from './TelaInicialProjeto'\nimport { TelaJogando } from './TelaJogando'\nimport { TelaFimdeJogo } from './TelaFimdeJogo'\nimport \"./JogoCacaPalavrasPrincipal.css\"\n\n// Etapa 02 - Implementar a lógica do jogo\nimport { useCallback } from 'react'\n\n  // Estágios do jogo\n  const estagios = [\n  {id:1,nome: \"Início\"}, // 0\n  {id:2,nome: \"Jogando\"}, // 1\n  {id:3,nome: \"Fimjogo\"} ] // 2\n\nconst JogoCacaPalavrasPrincipal = () => {\n\n  const [estagioJogo,setEstagiodoJogo] = useState (estagios[0].nome) // Posção 0 = Início\n  const [palavrasJogo] = useState (palavrasLista)\n  //console.log(\"Palavras do Jogo: \",palavrasJogo)\n\n  const funcaoIniciarJogo = () => {\n    console.log(\"Iniciar Jogo\");\n    console.log(\"Iniciar Jogo\");\n    console.log(\"Iniciar Jogo\");\n    // etapa 02 - Carregar palavra e categoria\n    // obter palavra e categoria. Devem ter o mesmo nome utilizado no return.\n    // const {categoria,palavraLocal} = funcaoCarregarPalavraeCategoria()\n    console.log(`Categoria: ${categoria} Palavra: ${palavraLocal}`)\n    // Mudar o estágio do jogo para Jogando\n    setEstagiodoJogo (estagios[1].nome)\n  }\n  const processarLetraJogoFunc = () => {\n    setEstagiodoJogo (estagios[2].nome)\n  } \n  const funcaoVoltarInicioJogo = () => {\n    setEstagiodoJogo (estagios[0].nome)\n  }\n  \n  // Etapa 02 - Função para carregar a palavra e categoria\n  /*\nÓtima pergunta! A finalidade do useCallback neste ponto é memorizar (ou \"cachear\") a função funcaoCarregarPalavraeCategoria para que ela só seja recriada quando a dependência palavrasJogo mudar.\n\nPor que usar useCallback aqui?\nEvita recriação desnecessária: Sem useCallback, toda vez que o componente renderiza, a função seria criada novamente. Com useCallback, ela só é recriada se palavrasJogo mudar.\nPerformance: Isso pode ser útil se você passar essa função para componentes filhos que dependem de referência estável (por exemplo, em otimizações com React.memo).\nConsistência: Garante que a função mantém a mesma referência entre renders, a menos que as dependências mudem.\nExemplo simplificado\nSó será recriada se dependencia mudar.\nNo seu código\nNo seu caso, como palavrasJogo é inicializado uma vez e nunca muda, o uso de useCallback não traz muito benefício prático. Mas, se no futuro palavrasJogo pudesse mudar, useCallback garantiria que a função fosse atualizada corretamente.\n\nResumo:\nuseCallback serve para evitar que a função seja recriada em toda renderização, melhorando performance e estabilidade de referência, especialmente ao passar funções para componentes filhos.\n  */\n  const funcaoCarregarPalavraeCategoria  = useCallback (  () => {\n    // Escolher uma palavra aleatória\n    const palavraAleatoria = palavrasJogo[Math.floor(Math.random() * palavrasJogo.length)]\n    console.log(\"Palavra Aleatória: \",palavraAleatoria)\n    // Escolher a categoria da palavra\n    const categoriaPalavra = Object.keys(palavraAleatoria)[0]\n    console.log(\"Categoria da Palavra: \",categoriaPalavra)\n    // Escolher a palavra\n    const palavra = palavraAleatoria[categoriaPalavra][Math.floor(Math.random() * palavraAleatoria[categoriaPalavra].length)]\n    console.log(\"Palavra: \",palavra)\n    return {categoria,palavraLocal};\n  }, [palavrasJogo] );\n  \n\n  return (\n    <div className=\"jogo-caca-palavras-container\">\n        {/* <TelaInicialProjeto /> */}\n        {/* Mostrar o estágio do jogo \n        {console.log(\"Dica estagioJogo: \",estagioJogo)} */}\n        {/* Como a posição 0 contem Inicio será apresentado o conteúdo do componente TelaInicial na tela. */}\n        {estagioJogo === \"Início\" && <TelaInicialProjeto iniciarJogo={funcaoIniciarJogo}/>}\n        {estagioJogo === \"Jogando\" && <TelaJogando processarLetraJogo={processarLetraJogoFunc} />}\n        {estagioJogo === \"Fimjogo\" && <TelaFimdeJogo voltarInicio={funcaoVoltarInicioJogo} />}\n    </div>\n  )\n}\n\nexport default JogoCacaPalavrasPrincipal"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}