{"ast":null,"code":"var _jsxFileName = \"/workspaces/projetoreactjsaluno/src/Componentes/JogoCacaPalavrasParte03/TelaJogando.js\",\n  _s = $RefreshSig$();\n// Relacionados ao formulário. \nimport React, { useRef, useState } from 'react';\nimport \"./TelaJogando.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TelaJogando = ({\n  processarLetraJogoFunc,\n  pontuacao,\n  obterCategoriaDoJogo,\n  tentativas,\n  letrasAdivinhadasVetor,\n  letrasDoJogo,\n  letrasErradasVetor\n}) => {\n  _s();\n  {/* Relacionados ao formulário. Etapa 02 */}\n  const [letraDigitada, setLetraDigitada] = useState(\"\");\n  const letraDigitadaRef = useRef(null);\n\n  // Função para o formulário etapa 03\n  const handleFuncaoSubmeter = e => {\n    e.preventDefault(); // Evitar o recarregamento da página\n    /*\n    Evitar o recarregamento da página em aplicações React é importante porque:\n    React é uma SPA (Single Page Application): O React gerencia a interface do usuário no navegador sem recarregar a página inteira. Isso permite uma navegação mais rápida e uma experiência de usuário mais fluida.\n    Estado da aplicação: Se a página recarrega, todo o estado mantido em memória (como variáveis de componentes, dados do usuário, progresso do jogo, etc.) é perdido.\n    Performance: Recarregar a página faz com que todos os arquivos JavaScript, CSS e imagens sejam carregados novamente, o que é desnecessário e deixa a aplicação mais lenta.\n    Controle: Ao evitar o recarregamento, você pode controlar exatamente o que acontece na interface, mostrando apenas as mudanças necessárias.\n    Exemplo prático:\n    Ao usar formulários, normalmente você previne o recarregamento padrão do navegador usando event.preventDefault():\n    Resumo:\n    Evitar o recarregamento mantém a experiência do usuário rápida, preserva o estado da aplicação e aproveita ao máximo o React. */\n    // funcao para processar a letra em JogoCacaPalavrasPrincipal.js\n    console.log(\"Letra Digitada: \", letraDigitada);\n    processarLetraJogoFunc(letraDigitada);\n    setLetraDigitada(\"\"); // Limpar o campo de entrada após o envio\n    letraDigitadaRef.current.focus(); // Manter o foco no campo de entrada\n  };\n\n  // Teste etapa 03\n  console.log(`Variaveis Globais TelaJogando.js: \n         CategoriaDoJogo: ${obterCategoriaDoJogo} \n         VetorletrasDoJogo: ${letrasDoJogo}`);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"css_telajogando\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tela Jogando 03\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"css_pontuacao\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" Pontua\\xE7\\xE3o: \", pontuacao, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Advinhe a palavra \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"css_dica\",\n      children: [\" Dica sobre a palavra.\", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" \", obterCategoriaDoJogo, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Voc\\xEA ainda tem \", tentativas, \" tentativas\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"css_container_palavra\",\n      children: letrasDoJogo && letrasDoJogo.map((letra, indice) => letrasAdivinhadasVetor.includes(letra) ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"css_letras\",\n        children: [\"        \", letra, \" \"]\n      }, indice, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"css_quadrado_branco\",\n        children: \"   \"\n      }, indice, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 23\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Tente Advinhar uma letra da palavra \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleFuncaoSubmeter,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"css_formulario_letra\",\n        type: \"text\",\n        name: \"Letra\",\n        maxLength: \"1\",\n        required: true,\n        onChange: e => setLetraDigitada(e.target.value),\n        value: letraDigitada,\n        ref: letraDigitadaRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 53\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Jogar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 27\n      }, this), console.log(\"Dica letraDigitada\", letraDigitada), console.log(\"Dica letraDigitadaRef\", letraDigitadaRef)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"css_letras_erradas\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Letras j\\xE1 utilizadas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), letrasErradasVetor && letrasErradasVetor.map((letra, indice) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" \", letra, \", \"]\n      }, indice, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 26\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: processarLetraJogoFunc,\n      children: \"Finalizar Jogo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(TelaJogando, \"k0FdGBmB1zUw2llFqKtvh1pHX/I=\");\n_c = TelaJogando;\nvar _c;\n$RefreshReg$(_c, \"TelaJogando\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","TelaJogando","processarLetraJogoFunc","pontuacao","obterCategoriaDoJogo","tentativas","letrasAdivinhadasVetor","letrasDoJogo","letrasErradasVetor","_s","letraDigitada","setLetraDigitada","letraDigitadaRef","handleFuncaoSubmeter","e","preventDefault","console","log","current","focus","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","letra","indice","includes","onSubmit","type","name","maxLength","required","onChange","target","value","ref","onClick","_c","$RefreshReg$"],"sources":["/workspaces/projetoreactjsaluno/src/Componentes/JogoCacaPalavrasParte03/TelaJogando.js"],"sourcesContent":["// Relacionados ao formulário. \nimport React, { useRef, useState } from 'react'\nimport \"./TelaJogando.css\"\nexport const TelaJogando = ({processarLetraJogoFunc,\n          pontuacao,\n          obterCategoriaDoJogo,\n          tentativas,\n                  letrasAdivinhadasVetor,\n                  letrasDoJogo ,\n                         letrasErradasVetor\n\n}) => {\n  {/* Relacionados ao formulário. Etapa 02 */}\n  const [letraDigitada,setLetraDigitada] = useState (\"\");\n  const letraDigitadaRef = useRef (null)\n\n  // Função para o formulário etapa 03\n  const handleFuncaoSubmeter = (e) => {\n    e.preventDefault(); // Evitar o recarregamento da página\n    /*\nEvitar o recarregamento da página em aplicações React é importante porque:\n\nReact é uma SPA (Single Page Application): O React gerencia a interface do usuário no navegador sem recarregar a página inteira. Isso permite uma navegação mais rápida e uma experiência de usuário mais fluida.\nEstado da aplicação: Se a página recarrega, todo o estado mantido em memória (como variáveis de componentes, dados do usuário, progresso do jogo, etc.) é perdido.\nPerformance: Recarregar a página faz com que todos os arquivos JavaScript, CSS e imagens sejam carregados novamente, o que é desnecessário e deixa a aplicação mais lenta.\nControle: Ao evitar o recarregamento, você pode controlar exatamente o que acontece na interface, mostrando apenas as mudanças necessárias.\nExemplo prático:\nAo usar formulários, normalmente você previne o recarregamento padrão do navegador usando event.preventDefault():\n\nResumo:\nEvitar o recarregamento mantém a experiência do usuário rápida, preserva o estado da aplicação e aproveita ao máximo o React. */\n    // funcao para processar a letra em JogoCacaPalavrasPrincipal.js\n    console.log(\"Letra Digitada: \",letraDigitada)\n    processarLetraJogoFunc(letraDigitada);\n    setLetraDigitada (\"\"); // Limpar o campo de entrada após o envio\n    letraDigitadaRef.current.focus(); // Manter o foco no campo de entrada\n  }\n\n  // Teste etapa 03\n  console.log(`Variaveis Globais TelaJogando.js: \n         CategoriaDoJogo: ${obterCategoriaDoJogo} \n         VetorletrasDoJogo: ${letrasDoJogo}`)\n  return (\n    <div className='css_telajogando'>\n       <h1>Tela Jogando 03</h1>\n        <p className=\"css_pontuacao\">\n                <span> Pontuação: {pontuacao} </span>\n                </p>\n                <h1> Advinhe a palavra </h1>\n                <h3 className=\"css_dica\"> Dica sobre a palavra. \n                    <span> {obterCategoriaDoJogo} </span>\n                </h3>\n                <p>Você ainda tem {tentativas} tentativas</p>\n\n                {/* Quadrado Amarelo. */}\n                {/* Etapa 03, vai gerar os quadros brancos\n                O que esse código faz?\nVerifica se letrasDoJogo existe (não é null ou undefined).\nSe existir, chama o método .map() para percorrer cada elemento do array letrasDoJogo.\nPara cada elemento, recebe dois parâmetros: letra (o valor atual) e indice (a posição no array).\nVerifica se a letra atual já foi adivinhada.\nUsa o método .includes() para checar se letra está presente no array letrasAdivinhadasVetor.\nSe a letra foi adivinhada (true):\nRenderiza um elemento <span> mostrando a letra.\nkey={indice} é uma chave única para ajudar o React a identificar cada elemento.\nclassName=\"css_letras\" aplica um estilo CSS específico.\nSe a letra NÃO foi adivinhada (false):\nRenderiza um <span> vazio (sem letra), apenas com um espaço em branco.\nUsa uma classe CSS diferente: css_quadrado_branco.\nFecha o método .map() e o bloco JSX.\nO resultado é uma lista de <span>s, cada um representando uma letra (ou espaço em branco) da palavra do jogo.\nResumindo\nEsse trecho de código exibe uma palavra do jogo, mostrando as letras já adivinhadas e escondendo as que ainda faltam, usando React e JSX. Cada letra (ou espaço) é um <span> estilizado, facilitando a visualização para o usuário.\n                */}\n         <div className=\"css_container_palavra\"> \n                { letrasDoJogo && letrasDoJogo.map ((letra,indice) => (\n                    letrasAdivinhadasVetor.includes(letra) ? \n                    ((<span key={indice} className=\"css_letras\">        {letra} </span> )) : \n                    ((<span key={indice} className=\"css_quadrado_branco\">   </span> )) \n                ))} \n            </div>\n                {/* Criar o formulário */}\n                 <p> Tente Advinhar uma letra da palavra </p>\n                    {/*  */}\n                    <form  onSubmit={handleFuncaoSubmeter}>\n                        <input className=\"css_formulario_letra\" type=\"text\" name=\"Letra\" maxLength=\"1\" required \n                          onChange={(e) => setLetraDigitada (e.target.value)}\n                          value={letraDigitada}\n                          ref = {letraDigitadaRef}/><br />\n                          <button>\n                            Jogar\n                          </button>\n                          {console.log (\"Dica letraDigitada\",letraDigitada)}\n                          {console.log (\"Dica letraDigitadaRef\", letraDigitadaRef)}\n                    </form>\n                <div className=\"css_letras_erradas\">\n                {/* Espaço para as letras incorretas */}\n                <p> Letras já utilizadas</p>\n                {/* Se a letra tiver sido advinhinhada vou mostrar ela.*/}\n                { letrasErradasVetor && letrasErradasVetor.map ((letra,indice) => (\n                        (<span key={indice}> {letra}, </span> )  ))}\n                </div>\n            <button onClick={processarLetraJogoFunc}>Finalizar Jogo</button>\n    </div>\n  )\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}